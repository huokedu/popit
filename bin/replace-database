#!/bin/bash

# This script takes as input some dumped collections, in monogexport's
# one-JSON-object-per-line format, and uses them to replace those
# collections in a live PopIt database. This will create a new database
# with the current date appended to the database name and then point the
# instance at it.

set -ex

COLLECTIONS=('organizations' 'persons' 'memberships')
DATE=$(date +%Y%m%d)

if [ "$#" != "4" ]
then
    echo "Usage: $0 COLLECTION-DUMP-ROOT MONGO-DB-NAME SLUG MASTER-DB-NAME"
    exit 1
fi

DUMP_ROOT="$1"
MONGO_DB_NAME="$2"
SLUG="$3"
MASTER_DB_NAME="$4"
MONGO_NEW_DB_NAME="${MONGO_DB_NAME}_$DATE"

if ! which node
then
    echo "The node binary couldn't be found on your PATH"
    exit 1
fi

# The node_modules directory must be in the current directory:

if ! [ -d node_modules ]
then
    echo "The current directory must contain node_modules"
    exit 1
fi

# check that NODE_ENV has been set

if [ -z "$NODE_ENV" ]
then
    echo 'You need to set NODE_ENV to the same as the popit process. This is most likely ' \
         'either production or development. If you do not then this script may end up ' \
         'altering the instances collection in the wrong master database'
    exit 1
fi

read -r -d '' CHECK_MASTER_DB_CORRECT <<"EOF" || true
var PopIt = require('./lib/popit');
var config = require('config');

var master_db = process.argv[1];
var master = new PopIt();
master.set_as_master();

var connection = master.instance_db();
if ( connection.name != master_db ) {
  console.log('Expected to be using ' + master_db + ' but using ' + connection.name + ' instead');
  console.log('Check that NODE_ENV is set correctly');
  process.exit(1);
}
process.exit();

EOF

node --eval "$CHECK_MASTER_DB_CORRECT" "$MASTER_DB_NAME"

# Check that all the dump files exist:

MISSING_FILES=""
for COLLECTION in "${COLLECTIONS[@]}"
do
    FILENAME="$DUMP_ROOT$COLLECTION.json"
    if ! [ -e "$FILENAME" ]
    then
        MISSING_FILES="$FILENAME $MISSING_FILES"
    fi
done

if [ -n "$MISSING_FILES" ]
then
    echo "Couldn't find $MISSING_FILES"
    exit 1
fi

# Now import the new data:

for COLLECTION in "${COLLECTIONS[@]}"
do
    mongoimport \
        --db "$MONGO_NEW_DB_NAME" \
        --collection "$COLLECTION" \
        "$DUMP_ROOT$COLLECTION.json"
done

# now copy the settings data across which has instance name etc

mongoexport -d $MONGO_DB_NAME -c settings | mongoimport -d $MONGO_NEW_DB_NAME -c settings --drop

# reindex it:

read -r -d '' REINDEX_SCRIPT <<'EOF' || true
var reIndex = require('popit-api').reIndex;

var databaseName = process.argv[1];
console.warn("Reindexing the database: " + databaseName);

reIndex(databaseName, function(err, total) {
  if (err) {
    throw err;
  }
  console.log("Re-indexed " + total + " docs from " + databaseName);
  process.exit();
});
EOF

node --eval "$REINDEX_SCRIPT" "$MONGO_NEW_DB_NAME"

# Now tell the instance where to find the new database

# Now update the dbname for the instance

read -r -d '' CHANGE_DB_SCRIPT <<"EOF" || true
var PopIt = require('./lib/popit');
var config = require('config');

var new_db_name = process.argv[1];
var slug = process.argv[2];
var master = new PopIt();
master.set_as_master();

master.model('Instance').findOne(
  { slug: slug },
  function (err, instance) {
    if (err) throw err;

    if ( instance ) {
      var new_db_suffix = new_db_name.substr(config.MongoDB.popit_prefix.length);
      instance.update({ $set: { dbname: new_db_suffix } }, function() { process.exit(); });
    } else {
      throw new Error('No instance called ' + slug + ' found');
    }
  }
);
EOF

node --eval "$CHANGE_DB_SCRIPT" "$MONGO_NEW_DB_NAME" "$SLUG"

set +x
echo "Files imported into $MONGO_NEW_DB_NAME"
echo "You may need to restart the popit process for the new database to be used"
echo "You will also have to delete the old instance DB"
